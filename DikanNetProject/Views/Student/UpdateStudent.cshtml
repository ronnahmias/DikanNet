@using DataEntities;
@model DataEntities.Student

@{
    ViewBag.Title = "עדכון פרטים";
    Layout = "~/Views/Student/_Sp_Layout.cshtml";
}

<div class="container">
    @using (Html.BeginForm("UpdateStudent", "Student", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h4>עדכון פרטים</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="row">
                <div class="form-group col-md-4 col-sm-5 col-12">
                    @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label" })
                    <div class="">
                        @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control must" } })
                        @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group col-md-4 col-sm-5 col-12">
                    @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label " })
                    <div class="">
                        @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control must" } })
                        @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group col-md-4 col-sm-5 col-12">
                    @Html.LabelFor(model => model.BirthDay, htmlAttributes: new { @class = "control-label" })
                    <div class="">
                        @Html.EditorFor(model => model.BirthDay, new { htmlAttributes = new { @class = "form-control datepicker only-numbers must", @data_toggle = "datepicker" } })
                        @Html.ValidationMessageFor(model => model.BirthDay, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group col-md-4 col-sm-5 col-12">
                    @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label" })
                    <div class="">
                        @Html.DropDownListFor(model => model.Gender,
                  new SelectList(Enum.GetValues(typeof(Common.Enums.Genders))), "", new { @class = "form-control chosen must", @data_placeholder = "מגדר" })
                        @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group col-md-4 col-sm-5 col-12">
                    @Html.LabelFor(model => model.CountryBirthId, htmlAttributes: new { @class = "control-label" })
                    <div class="">
                        @Html.DropDownListFor(model => model.CountryBirthId, (IEnumerable<SelectListItem>)ViewBag.CountriesList, "", htmlAttributes: new { @class = "form-control chosen must", @data_placeholder = "ארץ לידה" })
                        @Html.ValidationMessageFor(model => model.CountryBirthId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group col-md-4 col-sm-5 col-12">
                    @Html.LabelFor(model => model.MaritalStatus, htmlAttributes: new { @class = "control-label" })
                    <div class="">
                        @Html.DropDownListFor(model => model.MaritalStatus,
                   new SelectList(Enum.GetValues(typeof(Common.Enums.MatrialStatus))), "", new { @class = "form-control chosen must", @data_placeholder = "מצב משפחתי" })
                        @Html.ValidationMessageFor(model => model.MaritalStatus, "", new { @class = "text-danger" })
                    </div>
                </div>


            </div>

            <div class="row">
                <div class="form-group col-md-6">
                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label" })
                    <div class="">
                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control must" } }) @*in first time read only after enable*@
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group col-md-3">
                    @Html.LabelFor(model => model.CellphoneNo, htmlAttributes: new { @class = "control-label" })
                    <div class="">
                        @Html.EditorFor(model => model.CellphoneNo, new { htmlAttributes = new { @class = "form-control only-numbers must" } })
                        @Html.ValidationMessageFor(model => model.CellphoneNo, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group col-md-3">
                    @Html.LabelFor(model => model.PhoneNo, htmlAttributes: new { @class = "control-label" })
                    <div class="">
                        @Html.EditorFor(model => model.PhoneNo, new { htmlAttributes = new { @class = "form-control only-numbers" } })
                        @Html.ValidationMessageFor(model => model.PhoneNo, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="form-group col-md-4 col-sm-4 col-12">
                    @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label" })
                    <div class="">
                        @Html.DropDownListFor(model => model.City, (IEnumerable<SelectListItem>)ViewBag.CitiesList, "", htmlAttributes: new { @class = "form-control chosen must", @data_placeholder = "עיר מגורים" })
                        @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group col-md-5 col-sm-5 col-12">
                    @Html.LabelFor(model => model.Street, htmlAttributes: new { @class = "control-label " })
                    <div class="">
                        @Html.EditorFor(model => model.Street, new { htmlAttributes = new { @class = "form-control must" } })
                        @Html.ValidationMessageFor(model => model.Street, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group col-md-3 col-sm-3 col-12">
                    @Html.LabelFor(model => model.HouseNo, htmlAttributes: new { @class = "control-label" })
                    <div class="">
                        @Html.EditorFor(model => model.HouseNo, new { htmlAttributes = new { @class = "form-control must" } })
                        @Html.ValidationMessageFor(model => model.HouseNo, "", new { @class = "text-danger" })
                    </div>
                </div>

            </div>

            <div class="row">

                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.MajorId, htmlAttributes: new { @class = "control-label " })
                    <div class="">
                        @Html.DropDownListFor(model => model.MajorId, (IEnumerable<SelectListItem>)ViewBag.MajorsList, "", htmlAttributes: new { @class = "form-control chosen must", @data_placeholder = "מגמה" })
                        @Html.ValidationMessageFor(model => model.MajorId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.LearnPath, htmlAttributes: new { @class = "control-label " })
                    <div class="">
                        @Html.DropDownListFor(model => model.LearnPath,
                       new SelectList(Enum.GetNames(typeof(Common.Enums.LearningPath))), "", new { @class = "form-control chosen must", @data_placeholder = "מסלול לימודים" })
                        @Html.ValidationMessageFor(model => model.LearnPath, "", new { @class = "text-danger" })
                    </div>
                </div>

            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.FileId, htmlAttributes: new { @class = "control-label", @for = "" })
                @Html.ValidationMessageFor(model => model.FileId, "", new { @class = "text-danger" })
                <div class="row">
                    <div class="chose-file m-3 mt-0">
                        @Html.TextBoxFor(model => model.FileId, new { @class = "must form-control", @type = "file", @accept = "image/jpeg,image/jpg,image/png,application/pdf", @style = "display:none;", @path = @Model.PathId })
                        <label for="FileId">
                            <i class="ml-1 material-icons">add_photo_alternate</i>
                            בחר קובץ
                        </label>
                    </div>
                    <a name="@Model.PathId" style="display:@(Model.PathId != null ? "" : "none")" class="btn btn-light btn-file">צפייה בקובץ שמור</a>

                </div>
            </div>
            @Html.HiddenFor(model => model.PathId)

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="שמור" class="btn btn-primary" onclick="return validUpdateStu()" />
                </div>
            </div>

        </div>
    }
</div>



@*
@section scripts{
    <script>
        $('.btn-file').click(function () {
            $('#fileModal').modal('show');
            var pathfile = $(this).attr('name');
            var url = '@Url.Action("GetFile","File")' + '?pFilePath=' + pathfile;
            var type = pathfile.split('.').pop();
            //console.log(type);
            if (type == "pdf")
                type = "application/pdf";
            else
                type = "image/" + type;
            $('.embed-file').attr('type', type);
            $('.embed-file').attr('src', url);

        });
    </script>
}
*@