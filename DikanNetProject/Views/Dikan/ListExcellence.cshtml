@model IEnumerable<DataEntities.SpExcellence>
@using NonFactors.Mvc.Grid;

@{
    ViewBag.Title = "מלגת מצוינות";
    Layout = "~/Views/Dikan/_Layout.cshtml";
}

<h2>@ViewBag.Title</h2>
<h2 class="text-danger">@ViewBag.res</h2>
<div class="table-responsive">
    @(Html
        .Grid(Model).Css("table")
        .Build(columns =>
        {
            columns.Add().Titled("#");
            columns.Add(model => "<a href='#' data-toggle='popover' data-placement='top' title='top' data-content="+ model.StudentId +">" + model.Student.FirstName + " " + model.Student.LastName + "</a>").Titled(Html.DisplayNameFor(s => s.Student.StudentRow)).Encoded(false);
            columns.Add(model => model.SchoolYear).Titled(Html.DisplayNameFor(s => s.SchoolYear));
            columns.Add(model => model.WorkPlace).Titled(Html.DisplayNameFor(s => s.WorkPlace));
            columns.Add(model => model.Statuss).Titled(Html.DisplayNameFor(s => s.Statuss));
            columns.Add(model => @Html.ActionLink("פרטים ופעולות", "StudentSp", new { spId = model.ScholarshipId, spType = model.ScholarshipDefinition.Type , StudId = model.StudentId}, new { @class = "btn btn-dark" })).Titled("פעולות");

            })
        .Empty("אין נתונים")
        .Sortable()
        .Filterable()
        .Pageable(pager =>
            {
                pager.PageSizes = new Dictionary<int, string> { { 0, "All" }, { 2, "2" }, { 4, "4" } };
                pager.ShowPageSizes = true;
                pager.PagesToDisplay = 3;
                pager.CurrentPage = 2;
                pager.RowsPerPage = 15;
            })
    )
</div>

@section scripts
{
    <script>


    MvcGrid.prototype.lang = {
        text: {
            'contains': 'מכיל',
            'equals': 'שווה ל',
            'not-equals': 'אינו שווה',
            'starts-with': 'מתחיל עם',
            'ends-with': 'נגמר עם'
        },
        number: {
            'equals': 'שווה',
            'not-equals': 'לא שווה',
            'less-than': 'קטן',
            'greater-than': 'גדול',
            'less-than-or-equal': 'קטן שווה',
            'greater-than-o-requal': 'גדול שווה'
        },
        date: {
            'equals': 'שווה',
            'not-equals': 'לא שווה',
            'earlier-than': 'Inférieur à',
            'later-than': 'Supérieur à',
            'earlier-than-or-equal': 'Inférieur ou égale à',
            'later-than-or-equal': 'Supérieur ou égale à'
        },
        enum: {
            'equals': 'Egale',
            'not-equals': 'Pas égal'
        },
        boolean: {
            'equals': 'Egale',
            'not-equals': 'Pas égal'
        },
        guid: {
            'equals': 'Egale',
            'not-equals': 'Pas égal',
        },
        filter: {
            'apply': '✔',
            'remove': '✘'
        },
        operator: {
            'select': '',
            'and': 'et',
            'or': 'ou'
        }
    };
</script>

}