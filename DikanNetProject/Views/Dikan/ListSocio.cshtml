@model IEnumerable<DataEntities.SpSocio>
@using NonFactors.Mvc.Grid;

@{
    ViewBag.Title = "מלגת סוציואקונומית";
    Layout = "~/Views/Dikan/_Layout.cshtml";
}

<h2 class="text-center mb-3">@ViewBag.SpTitle</h2>
<h2 class="text-danger">@ViewBag.res</h2>
<div class="table-responsive">
    @(Html
        .Grid(Model).Css("table text-center")
        .Build(columns =>
        {
            columns.Add(model => "<a href='#' data-html='true' data-toggle='popover' data-placement='left' title='תעודת זהות' data-content=" + model.StudentId + ">" + model.Student.FirstName + " " + model.Student.LastName + "</a>").Titled(Html.DisplayNameFor(s => s.Student.StudentRow)).Encoded(false).Filterable(true).Sortable(true);
            columns.Add(model => "<a href='#' data-html='true' data-toggle='popover' data-placement='left' title='שנת לימוד' data-content=" + model.SchoolYear + ">" + model.Student.Major.MajorName + " - " + model.Student.LearnPath + "</a>").Titled("מגמה").Encoded(false).Filterable(true).Sortable(true);
            columns.Add(model => model.AvgIncome).Titled("הכנסה ממוצעת לנפש");
            columns.Add(model => model.AvgExpense).Titled("הוצאה ממוצעת לנפש");
            columns.Add(model => model.NumOfPersons).Titled("מספר נפשות");
            columns.Add(model => model.HasFunding).Titled("מימון").RenderedAs(model => model.HasFunding == false ? "אין מימון נוסף" :  "<a href='#' data-html='true' data-toggle='popover' data-placement='left' title='גוף מממן - גובה מימון' data-content='<ul>" + model.fundingList +"</ul>'"+ ">" +  "קיים מימון נוסף" + "</a>").Encoded(false).Filterable(true).Sortable(true).UsingFilterOptions(new[]
        {
            new SelectListItem { Value = "false", Text = "אין מימון נוסף" },
            new SelectListItem { Value = "true", Text = "קיים מימון נוסף" }
        });
            columns.Add(model => model.DisabilityType).Titled("סוג נכות");
            columns.Add(model => model.Statuss).Titled(Html.DisplayNameFor(s => s.Statuss)).Filterable(true).UsingFilterOptions(new[]
        {
            new SelectListItem { Value = "בטיפול", Text = "בטיפול" },
            new SelectListItem { Value = "מאושר", Text = "מאושר" },
            new SelectListItem { Value = "נדחה", Text = "נדחה" }
        });
            columns.Add(model => @Html.ActionLink("פרטים ופעולות", "StudentSp", new { spId = model.ScholarshipId, spType = model.ScholarshipDefinition.Type , StudId = model.StudentId}, new { @class = "btn btn-dark" })).Titled("פעולות");

        })
        .Empty("אין נתונים")
        .Sortable()
        .Filterable()
        .Pageable(pager =>
        {
            pager.PageSizes = new Dictionary<int, string> { { 0, "All" }, { 10, "10" }, { 15, "15" }, { 20, "20" }, { 25, "25" } };
            pager.ShowPageSizes = true;
            pager.PagesToDisplay = 3;
            pager.CurrentPage = 2;
            pager.RowsPerPage = 25;
        })
    )
</div>

@section scripts
{
    <script>
    $(document).ready(function () {
        $('[data-toggle="popover"]').popover();
    });



    MvcGrid.prototype.lang = {
        text: {
            'contains': 'מכיל',
            'equals': 'שווה ל',
            'not-equals': 'אינו שווה',
            'starts-with': 'מתחיל עם',
            'ends-with': 'נגמר עם'
        },
        number: {
            'equals': 'שווה',
            'not-equals': 'לא שווה',
            'less-than': 'קטן',
            'greater-than': 'גדול',
            'less-than-or-equal': 'קטן שווה',
            'greater-than-o-requal': 'גדול שווה'
        },
        date: {
            'equals': 'שווה',
            'not-equals': 'לא שווה',
            'earlier-than': 'Inférieur à',
            'later-than': 'Supérieur à',
            'earlier-than-or-equal': 'Inférieur ou égale à',
            'later-than-or-equal': 'Supérieur ou égale à'
        },
        enum: {
            'equals': 'Egale',
            'not-equals': 'Pas égal'
        },
        boolean: {
            'equals': 'Egale',
            'not-equals': 'Pas égal'
        },
        guid: {
            'equals': 'Egale',
            'not-equals': 'Pas égal',
        },
        filter: {
            'apply': '✔',
            'remove': '✘'
        },
        operator: {
            'select': '',
            'and': 'et',
            'or': 'ou'
        }
    };
</script>

}